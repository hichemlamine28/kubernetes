In troduction
    Un des plus puissants orchestrateurs de conteneurs (google)
    Comment Deployer, Utilser et maintenir des applications Sur Kubernetes
    Comment Faire le build des applications avec des conteneurs en utilisant Docker
    Comment Deployer un Cluster Kubernetes.


Origin of Kubernetes
    pic01:Before KUbernetes
    pic02:  Plusieurs applications ur meme serveur , Risk Potentiel,
            Une application peut à un moment donné consommer toutes les ressources allouées
            Ceci peut engendrer la hausse des couts
            si le serveur est down, toutes les applications sont ko
    
    pic03:  VMs sont preferés car elles permettent de reduire le cout, 
            une meilleure utilisation des ressources et une meilleure scalabilité ...
            Mais toujours probleme cout d'implementation, hardware et software sont necessaires ce qui augmene le cout
            Risque de sécurité: les chances de perte de données en virtualisation est commun
            indisponibilté: applications/assets indisponible la plupart du temps car les ressources sont utilsées par une autre application
            Limitations et restrictions: pas toute applications ou serveur capables de fonctionner sur des VMs, certains necessitent des machines hybrides
            Consommation du temps: un processus qui prend trop du temps, plusieurs étapes sont necessaires pour atteindre un resultat
    pic04:
            What about Kubernetes ? il fonctionne en deploiement des conteneurs
            Oui, Kubernetes fonctionne tres bien et peut toujours etre  la bonne solution to eviter tout ce qu'on vient de mentionner.

    pic05:  Commençons d'abord par la difference entre VM et kubernetes

What is Kubernetes
    Tout Simplement, plateforme open-source utilsée pour maintenir et deployer des conteneurs
    Dans la pratique, kubernetes est generalement utilsé avec Docker pour une meilleure implementation et controle des applications conteneurisées
    Application conteneurisée: builder une application avec tous ses fichiers, librariries, packages ... necessaires pour son bon fonctionnement sur differentes plateformes
    Kubernetes a été introduit en tant que projet Google et c'est le successeur de gogle Borg
    Démarré en 2014, son architecturele rend compatible pour les applications a runner sur cloud
    Cloud Native Computing mantient maintenant Kubernetes

    Portable et 100% open-source: Compatible avec plusieurs plateformes flexibilité
    Workload scalability: Tres efficace, serveur ajouté et arreté facilement, changement automatique des contenrurs en execution et possible de faire scale manuel aussi
    High Availability: Kubernetes offre la disponibilité des conteneurs et de l'infarastructure. Peut fonctionner sur n'importe quel environnement
    Designed for deployment: Accelere les test, deploiement, la gestion,des phases, ideal pour deploiement
    Service discovery and load balancing: permet d'exposer des coneytenurs utilisant des dns ou des ip, si le traffic est elevé il peut balancerr e distribuer le traffic pour que deploiement soit stable
    Storage orchestration: montage auto comme les volumes loacux ou les cloud
    Self healing: redemarrer les conteneur en echec, remplecer des conetenrurs, kill des conteneur qui ne repondent pas au check
    Rollout/Rollback auto: Desired State peut etre decrit en utilsant kubernetes, etatt actuel d'un conteneur change pour etre desired state 
    Automatic bin packing: kubernetes specifie les valeur ram cpu necessaire pour chaque conteneur,, une fois les ressources sont definies, la gestion devient plus facile et la price de decision plus simple
    


Installation fo Kubernetes on Ubuntu
    install_kubernetes_ubuntu.sh
    install_lens.sh


Kubernetes Terminologies and Architecture
    Cluster: En semble de machines (physiques ou Virtuelles) sur lesqulles sont exécutées et gérées les applications
    Master: Collection de composant formant le control panel de K8S incluant le scheduling et les events du cluster$
    Node: Les workers machines sur lesquelles tournent les cnteneurs et les autres workloads
    Pod: ensembe de contenenur deployés nesemble sur le meme host
    Replication Controller: Utilsé pour définir le cycle de vie du pod (lifecycle) au lieu de creer les pods directement à la main.
    Selector: Correspond aux labels pour filtrer des ressources spécifiques
    Labels: Pair Cle_Valeur (key-value) attachés aux objets telque pod, permettant de filtrer, organiser et appliquer des opérations sur les ressources
    Replication Set: definint le nombre de replicats de chaque pod qui vont runner, gère et remplace les pods si mort (die)
    Annotation: label avec une plus large capacité data. Utilsé uniquement pour sauvegarder la data qui n'est pas recherché mais necessaire pour la ressource.
    Name: Definit le nom de la ressource
    Volume: directory/ dossier data accessibel par le conteneur
    Namespace: Fournit plus de qualification et de classification au nom de la ressource
    Service: abstration au dessus des pods qui fournit un ip unique et un DNS avec lesquel le pod est accessible
    Persistent Volumes: store data permanently (local or cloud drives can be attached), file system mounts to the cluster without being associated to any Node
    Pods provide two different types of sharing: networking and storage
    Deployment: indique combien de pods seront lancés en meme temps, gere aussi le cluster si un pod est en echec
    ingress: permet d'acceder aux services kubernetes de l'exterieur du cluster (ingress controller ou load balancer)

## master
    1) ETCD (Cluster Store):    stores the configuration details and essential values
                                communicates with all other components to receive commands and work to perform applications
                                manages network rules and post forwarding activity

    2) Controller Manager:      daemon (server) running in loop responsible for gathering information and sending it to API-server
                                works to get shared set of clusters and change to the desired state of the server

    3) Sceduler:                assign the taks to the slave nodes
                                responsible for distributing the workload and stores resoirce usage information of every nodes
                                it tracks how the working load is used on cluster and places the workload on the available ressources
                                
    4) Api-Server:              acts as an entry point for all REST commands used for controlling the clusters
                                implements an interface which makes different tools and librairies to communicate effectively

    
## Worker/ Slave node: 
    1) Pod:                     combination of containers logically running together on node
    2) Docker:                  Helps in running applications in an isolated but lightweight operating environement, it runs the configured pods
    3) Kubelet:                 Service responsible for conveying information to and from the control plane services
                                gets the configuration for a pod from the api server and ensures that the containers are working efficently
                                The ekubelet process is responsible for maintaining the work status and the node server
    4) kubernetes-proxy:        acts as a load balancer and network proxy to perform service on a sigle worker node
                                manages pods on nodes, volumes, secrets, creation of new containers, health check-up, ETCD
                                proxy service that runs on every node and helps making services available to the exetrnal host



    07-architecture1.png
    07-architecture2.png

    Les internautes n'acceptent plus du downtime !!!
    Les dev/admin doivent trouver une solution pour maintenir et mettre à jour les serveurs sans interruption de Service
    ====> container deployment :  les conteneurs tournent dans des environnements isolés, ce qui rend plus simple aux dev/admin l'edition et le deploiement 

                        swarm                       VS          Kubernetes
    scaling :           No auto scaling             |           Auto scaling
    Load Balancing:     Auto Load Balancing         |           Manually Configures load balancing
    
    Installation:       Easy and fast               |           Long and Time Consuming
    
    Scalabilit:         Cluster strength is weak    |           Cluster strentgh is strong
                        when comparing to k8s

    Storage Volume      Shares storage volumes      |           Shares storage volumes between multiple containers inside same pod
    sharing             with any other container

    GUI                 Not Available               |           Available



Uses Cases of Kubernetes
        
            08-companies-using-k8s.png


Kubernetes Demo

        demo 1+2+3


A comparative Analysis of Kubernetes and Docker

        kubernetes: plateforme open source  pour le maintien et le deploiement des conteneurs
        En praique  , kubernetes est plus utilsé par rapport a docker seul pour un mieux controle et implementation des applications conteneurisées
        Kubernetes & Docker fonctionnent ensemble 

        Docker est un outil utilisé pour automatiser le deploiement des applications dans des legers conteneurs de telle façon l'application tourne de façon efficace sur differents environnements
        Plusieurs conteneurs tournent sur le meme materiel
        Haute productivité
        Maintenir des applications isolées
        Configuration facile et rapide

        Kubernetes: 
                Les applications sont deployées en tant que combinaison de pods, deployments et services
                autoscaling possible
                Health check: liveness + readiness
                Installation et Configuration complexe
                High fault Tolerance (principe de google infrastructure)
        Docker: 
                Les applications sont deployées dna sun contexet services
                autoscaling non offert sauf via autre solution (swarm)
                Health check limité aux services
                Installation et configuration facile
                Low fault Tolerance











What are Orchestration Tools




How to set up simple Kubernetes Cluster using kops




Interview Questions


